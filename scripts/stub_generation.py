import sys
from pathlib import Path
from importlib import import_module

try:
    from mypy.stubgen import parse_options, generate_stubs
except ImportError:
    print("Please install mypy using  \"pip install mypy\" to generate pyi stub files for libraries generated by pybind11.")
    exit(0)

def __add_sub_modules(cpp_module_path: Path):
    if cpp_module_path.is_dir():
        with open(str(cpp_module_path / "__init__.pyi"), "a") as file_output:
            file_output.write("\n\n#   ---- start of includes of sub modules --- \n\n")

            for cpp_sub_module_path in cpp_module_path.iterdir():
                if cpp_sub_module_path.is_dir():
                    cpp_sub_module_name = str(cpp_sub_module_path.relative_to(cpp_sub_module_path.parent))
                else:
                    cpp_sub_module_name = str(cpp_sub_module_path.relative_to(cpp_sub_module_path.parent))[:-4]
                if cpp_sub_module_name != "__init__":
                    file_output.write("from . import {:s}\n".format(cpp_sub_module_name))

            file_output.write("\n#   ---- end of includes of sub modules --- \n\n")

        for cpp_sub_module_path in cpp_module_path.iterdir():
            __add_sub_modules(cpp_sub_module_path)

def __generate_stub_files_for_module(
        kratos_library_path: Path,
        cpp_module_name: str) -> None:
    args = ["-o", str(kratos_library_path.absolute()), "-p", cpp_module_name]
    options = parse_options(args)
    generate_stubs(options)

    # if sub modules are found, include them in the __init__.pyi
    cpp_module_path = kratos_library_path / cpp_module_name
    __add_sub_modules(cpp_module_path)

    return cpp_module_name

def main():
    print("--- Generating python stub files from {:s}".format(sys.argv[1]))
    kratos_installation_path = (Path(sys.argv[1])).absolute()
    kratos_library_path = (kratos_installation_path / "libs").absolute()
    sys.path.insert(0, str(kratos_installation_path.absolute()))
    sys.path.insert(0, str(kratos_library_path.absolute()))

    list_of_cpp_libs = []

    # generate Kratos core cpp stubs files
    list_of_cpp_libs.append(__generate_stub_files_for_module(kratos_library_path, "Kratos"))

    from KratosMultiphysics.kratos_utilities import GetListOfAvailableApplications
    list_of_available_applications = GetListOfAvailableApplications()
    for application_name in list_of_available_applications:
        import_module("KratosMultiphysics." + application_name)
        application_lib_name = "Kratos" + application_name
        list_of_cpp_libs.append(__generate_stub_files_for_module(kratos_library_path, application_lib_name))

    # now iterate through auxiliary libraries and generate stub files
    for custom_library_path in kratos_library_path.iterdir():
        if custom_library_path.is_file():
            custom_library_name = str(custom_library_path.relative_to(custom_library_path.parent))
            cpython_location = custom_library_name.find(".cpython")
            if cpython_location != -1:
                custom_library_name = custom_library_name[:cpython_location]
                if custom_library_name not in list_of_cpp_libs:
                    list_of_cpp_libs.append(__generate_stub_files_for_module(kratos_library_path, custom_library_name))

if __name__ == "__main__":
    main()
