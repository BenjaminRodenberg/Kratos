//    |  /           |
//    ' /   __| _` | __|  _ \   __|
//    . \  |   (   | |   (   |\__ `
//   _|\_\_|  \__,_|\__|\___/ ____/
//                   Multi-Physics
//
//  License:         BSD License
//                   Kratos default license: kratos/license.txt
//
//  Main authors:    Eduard GÃ³mez
//

// System includes
#include <cstring>

// External includes

// Project includes
#include "compilable_symbolic_test.h"

///@name Globals
///@{


///@}
///@name Type Definitions
///@{


///@}
///@name  Enum's
///@{


///@}
///@name  Functions
///@{


///@}
///@name Classes
///@{

class TetrahedronTestSuite
{
public:

    ///@name Type Definitions
    ///@{

    static constexpr std::size_t NumNodes = 4;
    static constexpr std::size_t Dim = 3;
    static constexpr std::size_t BlockSize = Dim + 2;

    ///@}
    ///@name Life Cycle
    ///@{

    /**
     * Default constructor
     *
     * Data container filled with Rankine-Hugoniot jump condition.
     * Difusive magnitudes are made-up but within the correct order of magnitude.
     */
    TetrahedronTestSuite(bool print_results = false)
        : mPrintResults(print_results)
    {
        ShapeFunctions(this->N, this->DN_DX, 0, 0, 0);

        /// Filling data
        constexpr double rho_0 = 1.16927;
        constexpr double rho_1 = 1.46426;

        constexpr double mom = 467.707;

        constexpr double et_0 = 346854;
        constexpr double et_1 = 422234;

        this->data.U(0, 0) = rho_0;
        this->data.U(1, 0) = rho_1;
        this->data.U(2, 0) = rho_0;
        this->data.U(3, 0) = rho_0;

        this->data.U(0, 1) = mom;
        this->data.U(1, 1) = mom;
        this->data.U(2, 1) = mom;
        this->data.U(3, 1) = mom;

        this->data.U(0, 4) = et_0;
        this->data.U(1, 4) = et_1;
        this->data.U(2, 4) = et_0;
        this->data.U(3, 4) = et_0;

        this->data.alpha_sc_nodes.Fill(1.5e-4);
        this->data.beta_sc_nodes.Fill(2.8e-5);
        this->data.lamb_sc_nodes.Fill(1.3e-7);
        this->data.mu_sc_nodes.Fill(2.3e-6);

        this->data.alpha = 0;
        this->data.beta = 1.13e-4;
        this->data.lambda = 6.84e-6;
        this->data.mu = 1.26e-4;

        this->data.gamma = 1.4;
        this->data.c_v = 722.14;
        this->data.h = 2.0;
    }

    ///@}
    ///@name Operators
    ///@{


    ///@}
    ///@name Operations
    ///@{

    int RunTests() const
    {
        auto result = TestResult::SUCCESS;

        result += test_substitute_rho_proj_3D();
        result += test_substitute_mom_proj_3D();
        result += test_substitute_tot_ener_proj_3D();
        result += test_substitute_lhs_3D_OSS();
        result += test_substitute_rhs_3D_OSS();
        result += test_substitute_lhs_3D_ASGS();
        result += test_substitute_rhs_3D_ASGS();

        return static_cast<int>(result);
    }

    ///@}
    ///@name Access
    ///@{


    ///@}
    ///@name Inquiry
    ///@{


    ///@}
    ///@name Input and output
    ///@{


    ///@}

private:

    ///@name Private static member variables
    ///@{


    ///@}
    ///@name Private member Variables
    ///@{

    ElementData<Dim, NumNodes> data;
    Matrix<NumNodes, Dim> DN_DX;
    Vector<NumNodes> N;
    bool mPrintResults;

    ///@}
    ///@name Private Operators
    ///@{


    ///@}
    ///@name Private Operations
    ///@{

    TestResult test_substitute_rho_proj_3D() const
    {
        Vector<NumNodes> rho_proj;

        // ------------------------- substitute_rho_proj_3D -------------------------
        //substitute_rho_proj_3D

        Vector<NumNodes> expected;
        expected[0] = -77.951166666666665606;
        expected[1] = -77.951166666666665606;
        expected[2] = -77.951166666666665606;
        expected[3] = -77.951166666666665606;

        return CheckSubstitutionResult("rho_proj_3D", rho_proj, expected, mPrintResults);
    }


    TestResult test_substitute_mom_proj_3D() const
    {
        Vector<Dim * NumNodes> mom_proj;

    // ------------------------- substitute_mom_proj_3D -------------------------
    //substitute_mom_proj_3D

        Vector<Dim * NumNodes> expected;
        expected[0]  = -38199.026727399781521;
        expected[1]  = -23123.790603943834867;
        expected[2]  = -23123.743318150052801;
        expected[3]  = -38199.370733959018253;
        expected[4]  = -23123.681303369005036;
        expected[5]  = -23123.657316510238161;
        expected[6]  = -38199.3889541139215;
        expected[7]  = -23123.67530814285783;
        expected[8]  = -23123.652761471519625;
        expected[9]  = -38199.370733959025529;
        expected[10] = -23123.681303369005036;
        expected[11] = -23123.657316510238161;


        return CheckSubstitutionResult("mom_proj_3D", mom_proj, expected, mPrintResults);
    }

    TestResult test_substitute_tot_ener_proj_3D() const
    {
        Vector<NumNodes> tot_ener_proj;

    // ------------------------- substitute_tot_ener_proj_3D -------------------------
    //substitute_tot_ener_proj_3D

        Vector<NumNodes> expected;
        expected[0] = 650.34404563661087195;
        expected[1] = 237.28688757874476778;
        expected[2] = 203.70255146375845356;
        expected[3] = 224.71439433220740511;

        return CheckSubstitutionResult("tot_ener_proj_3D", tot_ener_proj, expected, mPrintResults);
    }

    TestResult test_substitute_lhs_3D_OSS() const
    {
    // ------------------------- substitute_lhs_3D_OSS -------------------------
    //substitute_lhs_3D_OSS

        return TestResult::SUCCESS;
    }

    TestResult test_substitute_rhs_3D_OSS() const
    {
        Vector<BlockSize*NumNodes> rRightHandSideBoundedVector;

        const double stab_c1 = 12;
        const double stab_c2 = 2;
        const double stab_c3 = 1;

    // ------------------------- substitute_rhs_3D_OSS -------------------------
    //substitute_rhs_3D_OSS

        Vector<BlockSize*NumNodes> expected;
        expected[0]  = 129586.20119766362768;
        expected[1]  = -37873.97680532533559;
        expected[2]  = -23262.112022618039191;
        expected[3]  = -23254.902094212877273;
        expected[4]  = 413798.27815090655349;
        expected[5]  = -88081.722252947132802;
        expected[6]  = -38089.271760862153315;
        expected[7]  = -23214.188567774395779;
        expected[8]  = -23209.942729985992628;
        expected[9]  = -78249.923647935793269;
        expected[10] = -53318.556610606465256;
        expected[11] = -38189.824105623272771;
        expected[12] = -22809.305722123430314;
        expected[13] = -23116.554610274011793;
        expected[14] = -20008.098125665354019;
        expected[15] = -53329.803182941846899;
        expected[16] = -38182.965865428974212;
        expected[17] = -23120.398712731923297;
        expected[18] = -22804.746775478080963;
        expected[19] = -14319.600207868859798;

        return CheckSubstitutionResult("rhs_3D_OSS", rRightHandSideBoundedVector, expected, mPrintResults);
    }

    TestResult test_substitute_lhs_3D_ASGS() const
    {
    // ------------------------- substitute_lhs_3D_ASGS -------------------------
    //substitute_lhs_3D_ASGS

        return TestResult::SUCCESS;
    }

    TestResult test_substitute_rhs_3D_ASGS() const
    {
        Vector<BlockSize*NumNodes> rRightHandSideBoundedVector;

        const double stab_c1 = 12;
        const double stab_c2 = 2;
        const double stab_c3 = 1;

    // ------------------------- substitute_rhs_3D_ASGS -------------------------
    //substitute_rhs_3D_ASGS

        Vector<BlockSize*NumNodes> expected;
        expected[0]  = 129586.20119766362768;
        expected[1]  = -37873.976805325328314;
        expected[2]  = -23262.112022618039191;
        expected[3]  = -23254.902094212877273;
        expected[4]  = 413798.27815090655349;
        expected[5]  = -88081.722252947132802;
        expected[6]  = -38089.271760862153315;
        expected[7]  = -23214.188567774395779;
        expected[8]  = -23209.942729985992628;
        expected[9]  = -78249.923647935793269;
        expected[10] = -53318.556610606465256;
        expected[11] = -38189.824105623272771;
        expected[12] = -22809.305722123430314;
        expected[13] = -23116.554610274011793;
        expected[14] = -20008.098125665354019;
        expected[15] = -53329.803182941846899;
        expected[16] = -38182.965865428974212;
        expected[17] = -23120.398712731923297;
        expected[18] = -22804.746775478080963;
        expected[19] = -14319.600207868859798;

        return CheckSubstitutionResult("rhs_3D_ASGS", rRightHandSideBoundedVector, expected, mPrintResults);
    }

    ///@}
    ///@name Private  Access
    ///@{


    ///@}
    ///@name Private Inquiry
    ///@{


    ///@}
    ///@name Private LifeCycle
    ///@{


    ///@}
};

///@}
///@name Type Definitions
///@{


///@}
///@name Input and output
///@{


///@}


int main(int argc, char** argv)
{
    const bool print_results = argc > 1 && strcmp(argv[1], "--print-results")==0;

    return TetrahedronTestSuite(print_results).RunTests();
}