//    |  /           |
//    ' /   __| _` | __|  _ \   __|
//    . \  |   (   | |   (   |\__ `
//   _|\_\_|  \__,_|\__|\___/ ____/
//                   Multi-Physics
//
//  License:         BSD License
//                   Kratos default license: kratos/license.txt
//
//  Main authors:    Eduard GÃ³mez
//

// System includes
#include <cstring>

// External includes

// Project includes
#include "compilable_symbolic_test.h"

///@name Globals
///@{


///@}
///@name Type Definitions
///@{


///@}
///@name  Enum's
///@{


///@}
///@name  Functions
///@{


///@}
///@name Classes
///@{

class QuadrilateralTestSuite
{
public:

    ///@name Type Definitions
    ///@{

    static constexpr std::size_t NumNodes = 4;
    static constexpr std::size_t Dim = 2;
    static constexpr std::size_t BlockSize = Dim + 2;

    ///@}
    ///@name Life Cycle
    ///@{

    /**
     * Default constructor
     * 
     * Data container filled with Rankine-Hugoniot jump condition.
     * Difusive magnitudes are made-up but within the correct order of magnitude.
     */
    QuadrilateralTestSuite(bool print_results = false)
        : mPrintResults(print_results)
    {
        const double xi = -sqrt(3)/3;
        const double eta = sqrt(3)/3;
        ShapeFunctions(this->N, this->DN_DX, xi, eta);

        /// Filling data
        constexpr double rho_0 = 1.16927;
        constexpr double rho_1 = 1.46426;

        constexpr double mom = 467.707;

        constexpr double et_0 = 346854;
        constexpr double et_1 = 422234;

        this->data.U(0, 0) = rho_0;
        this->data.U(1, 0) = rho_1;
        this->data.U(2, 0) = rho_1;
        this->data.U(3, 0) = rho_0;

        this->data.U(0, 1) = mom;
        this->data.U(1, 1) = mom;
        this->data.U(2, 1) = mom;
        this->data.U(3, 1) = mom;

        this->data.U(0, 3) = et_0;
        this->data.U(1, 3) = et_1;
        this->data.U(2, 3) = et_1;
        this->data.U(3, 3) = et_0;

        this->data.alpha_sc_nodes.Fill(1.5e-4);
        this->data.beta_sc_nodes.Fill(2.8e-5);
        this->data.lamb_sc_nodes.Fill(1.3e-7);
        this->data.mu_sc_nodes.Fill(2.3e-6);

        this->data.alpha = 0;
        this->data.beta = 1.13e-4;
        this->data.lambda = 6.84e-6;
        this->data.mu = 1.26e-4;

        this->data.gamma = 1.4;
        this->data.c_v = 722.14;
        this->data.h = 2.0;
    }

    ///@}
    ///@name Operators
    ///@{


    ///@}
    ///@name Operations
    ///@{

    int RunTests() const
    {
        auto result = TestResult::SUCCESS;

        result += test_substitute_rho_proj_2D();
        result += test_substitute_mom_proj_2D();
        result += test_substitute_tot_ener_proj_2D();
        result += test_substitute_lhs_2D_OSS();
        result += test_substitute_rhs_2D_OSS();
        result += test_substitute_lhs_2D_ASGS();
        result += test_substitute_rhs_2D_ASGS();

        return static_cast<int>(result);
    }

    ///@}
    ///@name Access
    ///@{


    ///@}
    ///@name Inquiry
    ///@{


    ///@}
    ///@name Input and output
    ///@{


    ///@}

private:

    ///@name Private static member variables
    ///@{


    ///@}
    ///@name Private member Variables
    ///@{

    ElementData<Dim, NumNodes> data;
    Matrix<NumNodes, Dim> DN_DX;
    Vector<NumNodes> N;
    bool mPrintResults;

    ///@}
    ///@name Private Operators
    ///@{


    ///@}
    ///@name Private Operations
    ///@{

    TestResult test_substitute_rho_proj_2D() const
    {
        Vector<NumNodes> rho_proj;

    // ------------------------- substitute_rho_proj_2D -------------------------
    //substitute_rho_proj_2D

        Vector<NumNodes> expected;
        expected[0] = 0;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        
        return CheckSubstitutionResult("rho_proj_2D", rho_proj, expected, mPrintResults);
    }


    TestResult test_substitute_mom_proj_2D() const
    {
        Vector<Dim * NumNodes> mom_proj;

    // ------------------------- substitute_mom_proj_2D -------------------------
    //substitute_mom_proj_2D

        Vector<Dim * NumNodes> expected;
        expected[0] = 323.41193368440514178;
        expected[1] = -9.8639477702076238232e-13;
        expected[2] = 86.657966453324164036;
        expected[3] = -2.6430368392099063291e-13;
        expected[4] = 323.41193368440514178;
        expected[5] = -9.8639477702076238232e-13;
        expected[6] = 1206.9897682842961331;
        expected[7] = -3.6812754241620587954e-12;
        
        return CheckSubstitutionResult("mom_proj_2D", mom_proj, expected, mPrintResults);
    }

    TestResult test_substitute_tot_ener_proj_2D() const
    {
        Vector<NumNodes> tot_ener_proj;

    // ------------------------- substitute_tot_ener_proj_2D -------------------------
    //substitute_tot_ener_proj_2D
        
        Vector<NumNodes> expected;
        expected[0] = -28449.159438906241121;
        expected[1] = -7622.9292969991793143;
        expected[2] = -28449.159438906241121;
        expected[3] = -106173.70845862576971;
        
        return CheckSubstitutionResult("tot_ener_proj_2D", tot_ener_proj, expected, mPrintResults);
    }

    TestResult test_substitute_lhs_2D_OSS() const
    {
    // ------------------------- substitute_lhs_2D_OSS -------------------------
    //substitute_lhs_2D_OSS

        return TestResult::SUCCESS;
    }

    TestResult test_substitute_rhs_2D_OSS() const
    {
        Vector<BlockSize*NumNodes> rRightHandSideBoundedVector;
        const double stab_c1 = 12;
        const double stab_c2 = 2;
        const double stab_c3 = 1;

    // ------------------------- substitute_rhs_2D_OSS -------------------------
    //substitute_rhs_2D_OSS

        Vector<BlockSize*NumNodes> expected;
        expected[0] = -0.27983535927973562929;
        expected[1] = 131.11110392555048065;
        expected[2] = 195.386026326388901;
        expected[3] = -97816.487139542135992;
        expected[4] = 0.27983535927973962609;
        expected[5] = 238.23440538623225393;
        expected[6] = 52.353527966481571809;
        expected[7] = 72815.815767064399552;
        expected[8] = 1.0443597785862750449;
        expected[9] = 889.10290501237784611;
        expected[10] = -52.353527966484271872;
        expected[11] = 271752.32403725769836;
        expected[12] = -1.0443597785862790417;
        expected[13] = 489.31330128659192269;
        expected[14] = -195.38602632639174317;
        expected[15] = -365056.09982268471504;

        return CheckSubstitutionResult("rhs_2D_OSS", rRightHandSideBoundedVector, expected, mPrintResults);
    }

    TestResult test_substitute_lhs_2D_ASGS() const
    {
    // ------------------------- substitute_lhs_2D_ASGS -------------------------
    //substitute_lhs_2D_ASGS

        return TestResult::SUCCESS;
    }

    TestResult test_substitute_rhs_2D_ASGS() const
    {
        Vector<BlockSize*NumNodes> rRightHandSideBoundedVector;
        const double stab_c1 = 12;
        const double stab_c2 = 2;
        const double stab_c3 = 1;

    // ------------------------- substitute_rhs_2D_ASGS -------------------------
    //substitute_rhs_2D_ASGS

        Vector<BlockSize*NumNodes> expected;
        expected[0] = -0.27983535927973562929;
        expected[1] = 131.11110392555048065;
        expected[2] = 195.386026326388901;
        expected[3] = -97816.487139542135992;
        expected[4] = 0.27983535927973962609;
        expected[5] = 238.23440538623225393;
        expected[6] = 52.353527966481571809;
        expected[7] = 72815.815767064399552;
        expected[8] = 1.0443597785862750449;
        expected[9] = 889.10290501237784611;
        expected[10] = -52.353527966484271872;
        expected[11] = 271752.32403725769836;
        expected[12] = -1.0443597785862790417;
        expected[13] = 489.31330128659192269;
        expected[14] = -195.38602632639174317;
        expected[15] = -365056.09982268471504;

        return CheckSubstitutionResult("rhs_2D_ASGS", rRightHandSideBoundedVector, expected, mPrintResults);
    }

    ///@}
    ///@name Private  Access
    ///@{


    ///@}
    ///@name Private Inquiry
    ///@{


    ///@}
    ///@name Private LifeCycle
    ///@{


    ///@}
};

///@}
///@name Type Definitions
///@{


///@}
///@name Input and output
///@{


///@}

int main(int argc, char** argv)
{
    const bool print_results = argc > 1 && strcmp(argv[1], "--print-results")==0;

    return QuadrilateralTestSuite(print_results).RunTests();
}