import KratosMultiphysics

import KratosMultiphysics.sympy_fe_utilities as KratosSympy

from KratosMultiphysics.FluidDynamicsApplication.symbolic_generation.compressible_navier_stokes.src \
    .defines import CompressibleNavierStokesDefines as defs

from KratosMultiphysics.FluidDynamicsApplication.symbolic_generation.compressible_navier_stokes.src \
    .symbolic_geometry import GeometryDataFactory

class CompressibleNavierStokesSymbolicGeneratorBase:
    def __init__(self, settings):
        settings.RecursivelyValidateAndAssignDefaults(self.GetDefaultParameters())

        self.write_language = settings["language"].GetString()
        defs.SetFormat(self.write_language)

        self.is_explicit = settings["explicit"].GetBool()
        self.simplify = settings["do_simplifications"].GetBool()
        self.shock_capturing = settings["shock_capturing"].GetBool()

        echo_level = settings["echo_level"].GetInt()
        severity = KratosMultiphysics.Logger.Severity(echo_level)
        KratosMultiphysics.Logger.GetDefaultOutput().SetSeverity(severity)

        self.geometry = GeometryDataFactory(settings["geometry"].GetString())

        self.template_filename = settings["template_filename"].GetString()
        self.output_filename = settings["output_filename"].GetString()

        self.outstring = None
        self.TouchFiles()

        if int(severity) >= int(KratosMultiphysics.Logger.Severity.DETAIL):
            KratosMultiphysics.Logger.PrintInfo(settings)

    @classmethod
    def GetDefaultParameters(cls):
        return KratosMultiphysics.Parameters("""
        {
            "language": "c",
            "explicit": true,
            "do_simplifications": false,
            "geometry": "line",
            "shock_capturing": true,
            "template_filename" : "PLEASE PROVIDE A template_filename",
            "output_filename"   : "symbolic_generator_name_not_provided.cpp",
            "echo_level" : 1
        }""")

    def TouchFiles(self):
        raise NotImplementedError("Calling base class CompressibleNavierStokesSymbolicGeneratorBase's TouchFiles.")

    def _TouchFiles(self, generator_filename):
        with open(self.template_filename, "r") as template:
            self.outstring = template.read()

        # Touching the outfile just to make sure it is available
        with open(self.output_filename, "w") as tmp:
            tmp.write("This file is currently being processed by" + generator_filename)

    def FindAndRemoveIndentation(self, target_substring):
        end = self.outstring.find(target_substring)
        begin = end
        leading_spaces = 0
        while begin > 0:
            if self.outstring[begin] == '\n':
                break
            if self.outstring[begin] != ' ':
                end = begin - 1
            begin -= 1

        leading_spaces = end - begin

        if leading_spaces % 4 == 0:
            self.outstring = self.outstring[:begin+1] + self.outstring[end+1:]
            return int(leading_spaces / 4)

        raise ValueError(
            "Inconsistent indentation in source file!" +
            "Substitution {} found {} leading spaces, which is not a multiple of four.".format(
            target_substring, leading_spaces
        ))

    def CollectAndReplace(self, target_substring, expression, name):
        indentation_level  = self.FindAndRemoveIndentation(target_substring)

        out = KratosSympy.OutputVector_CollectingFactors(expression, name, self.write_language, indentation_level=indentation_level, replace_indices=False, assignment_op=" = ")
        self.outstring = self.outstring.replace(target_substring, out)

    def WriteWarningMessage(self):
        message = "\n".join([
            "/**",
            " *",
            " *                          WARNING! THIS FILE IS READ-ONLY",
            " *",
            " * This file has been auto-generated by compressible_navier_stokes_symbolic_generator.py",
            " * located in the symbolic_generation directories of the FluidDynamicsApplication",
            " *",
            " * Any modifications to this file will be overwritten if and when that script is run again.",
            " *",
            " * In order to do any lasting changes, modify the template used by the script:",
            " * " + self.template_filename,
            " * located in the symbolic_generation directories of the FluidDynamicsApplication.",
            " *",
            " * In order to change the formulation you will have to modify the script itself.",
            " */"
        ])

        self.outstring = self.outstring.replace("//automated_message", message)

    def Generate(self):
        raise NotImplementedError("Calling base class CompressibleNavierStokesSymbolicGeneratorBase's Generate.")

    def Write(self):
        KratosMultiphysics.Logger.Print(" - Writing {}".format(self.output_filename))

        with open(self.output_filename, "w") as outputfile:
            outputfile.write(self.outstring)
            outputfile.close()

        KratosMultiphysics.Logger.Print("Geometry {} done".format(self.geometry))
